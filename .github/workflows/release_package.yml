name: Release package

on:
  workflow_dispatch:
    inputs:
      release-type:
        description: 'Release type (one of): patch, minor, major, prepatch, preminor, premajor, prerelease'
        required: true

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      # Checkout project repository
      - name: Checkout
        uses: actions/checkout@v3

      # Setup Node.js environment (using latest LTS version)
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          registry-url: https://registry.npmjs.org/
          node-version: '18'

      # Configure Git
      - name: Git configuration
        run: |
          git config --global user.email "bojana456@hotmail.com"
          git config --global user.name "bojana1104"

      # Ensure CHANGELOG.md is not empty and has the correct structure
      - name: Prepare CHANGELOG.md
        run: |
          if [ ! -s CHANGELOG.md ]; then
            echo "# Changelog" > CHANGELOG.md
            echo "" >> CHANGELOG.md
            echo "All notable changes to this project will be documented in this file." >> CHANGELOG.md
            echo "" >> CHANGELOG.md
            echo "## [Unreleased]" >> CHANGELOG.md
            echo "" >> CHANGELOG.md
          fi

      # Debug step: Print the content of CHANGELOG.md
      - name: Debug CHANGELOG.md
        run: cat CHANGELOG.md

      # Bump package version (for normal releases)
      - name: Bump release version
        if: startsWith(github.event.inputs.release-type, 'pre') != true
        run: |
          echo "NEW_VERSION=$(npm --no-git-tag-version version ${{ github.event.inputs.release-type }})" >> $GITHUB_ENV
          echo "RELEASE_TAG=latest" >> $GITHUB_ENV

      # Bump package pre-release version (for beta versions)
      - name: Bump pre-release version
        if: startsWith(github.event.inputs.release-type, 'pre')
        run: |
          echo "NEW_VERSION=$(npm --no-git-tag-version --preid=beta version ${{ github.event.inputs.release-type }})" >> $GITHUB_ENV
          echo "RELEASE_TAG=beta" >> $GITHUB_ENV

      # Update changelog using latest release-changelog-action version
      - name: Update changelog
        uses: superfaceai/release-changelog-action@v2
        with:
          path-to-changelog: CHANGELOG.md
          version: ${{ env.NEW_VERSION }}
          operation: release

      # Commit changes (including package-lock.json)
      - name: Commit CHANGELOG.md, package.json, and package-lock.json changes and create tag
        run: |
          git add "package.json" "package-lock.json" "CHANGELOG.md"
          git commit -m "chore: release ${{ env.NEW_VERSION }}"
          git tag ${{ env.NEW_VERSION }}

      # Publish version to public repository
      - name: Publish to npm
        run: yarn publish --verbose --access public --tag ${{ env.RELEASE_TAG }}
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPMJS_ACCESS_TOKEN }}

      # Push repository changes
      - name: Push changes to repository
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git push origin && git push --tags

      # Read version changelog
      - id: get-changelog
        name: Get version changelog
        uses: superfaceai/release-changelog-action@v2
        with:
          path-to-changelog: CHANGELOG.md
          version: ${{ env.NEW_VERSION }}
          operation: read

      # Set prerelease flag
      - name: Set prerelease flag
        run: |
          if [[ "${{ github.event.inputs.release-type }}" == pre* ]]; then
            echo "PRERELEASE=true" >> $GITHUB_ENV
          else
            echo "PRERELEASE=false" >> $GITHUB_ENV
          fi

      # Update GitHub release with changelog
      - name: Create GitHub release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.NEW_VERSION }}
          body: ${{ steps.get-changelog.outputs.changelog }}
          prerelease: ${{ env.PRERELEASE }}
          draft: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
